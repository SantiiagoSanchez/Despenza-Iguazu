@page "/usuarios"
@inject IHttpServicio http

<div class="container my-5 p-4 rounded"
     style="background: linear-gradient(135deg, #6a0dad, #000000); box-shadow: 0 8px 20px rgba(0,0,0,0.2);">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold text-white mb-0">Lista de Usuarios</h2>
    </div>

    @if (Mensaje != "")
    {
        <div class="alert alert-danger text-white">
            Error: @Mensaje
        </div>
    }

    <div class="table-responsive shadow rounded" style="background-color: #1e1e2f;">
        <table class="table table-hover table-dark align-middle mb-0">
            <thead style="background-color: #7d2ae8;">
                <tr>
                    <th scope="col">Email</th>
                    <th scope="col" class="text-center" style="width: 120px;">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (listaUsuarios == null)
                {
                    <tr>
                        <td colspan="2" class="text-center py-3 text-white">Buscando usuarios...</td>
                    </tr>
                }
                else if (!listaUsuarios.Any())
                {
                    <tr>
                        <td colspan="2" class="text-center py-3 text-white">No hay usuarios registrados.</td>
                    </tr>
                }
                else
                {
                    @foreach (var item in listaUsuarios)
                    {
                        <tr>
                            <td>@item.Email</td>
                            <a class="btn btn-outline-light" href="/usuarios/editar/@item.Id" style="font-size: small">Asignar Rol</a>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>


@code {

    List<UserListadoDTO> listaUsuarios;
    UserListadoDTO usuario;
    string Mensaje = "";

    UserListadoDTO? UsuarioBorrar = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
    }

    private async Task Leer()
    {
        var resp = await http.Get<List<UserListadoDTO>>("usuarios/Admin");
        if (!resp.Error)
        {
            listaUsuarios = resp.Respuesta;
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
    }

    private async Task Eliminar(UserListadoDTO userListadoDTO)
    {
        UsuarioBorrar = userListadoDTO;
    }

    private void Cancelar()
    {
        UsuarioBorrar = null;
    }

    private async Task Borrar()
    {
        var respuesta = await http.Delete($"api/usuarios/{UsuarioBorrar.Id}");
        if (respuesta.Error)
        {
            var body = "No se pudo borrar";
        }
        Cancelar();
        await Leer();
    }

}