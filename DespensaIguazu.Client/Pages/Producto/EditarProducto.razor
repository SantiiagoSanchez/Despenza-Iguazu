@page "/api/Producto/Editar/{ProductoID:int}"
@inject IHttpServicio http
@inject NavigationManager navigationManager


<EditForm Model="producto" OnValidSubmit="Grabar">
    <DataAnnotationsValidator/>
    <div class="form-group">
        <label>Código</label>
        <div>
            <InputText class="form-control" @bind-Value="@producto.Codigo" />
            <ValidationMessage For="@(() => producto.Codigo)" />
        </div>
    </div>

    <div class="form-group">
        <label>Nombre</label>
        <div>
            <InputText class="form-control" @bind-Value="@producto.Nombre" />
            <ValidationMessage For="@(() => producto.Nombre)" />
        </div>
    </div>
    <div class="form-group">
        <label for="MarcaId">Marca</label>
        <InputSelect class="form-control" id="MarcaId" @bind-Value="producto.MarcaId">
            <option value="">Seleccione...</option>
            @foreach (var marca in marcas)
            {
                <option value="@marca.Id">@marca.Nombre</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="UnidadId">Unidades</label>
        <InputSelect class="form-control" id="UnidadId" @bind-Value="producto.UnidadId">
            <option value="">Seleccione...</option>
            @foreach (var unidad in unidades)
            {
                <option value="@unidad.Id">@unidad.Nombre</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Precio</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@producto.Precio" />
            <ValidationMessage For="@(() => producto.Precio)" />
        </div>
    </div>
    <div class="form-group">
        <label>Stock</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@producto.Stock" />
            <ValidationMessage For="@(() => producto.Stock)" />
        </div>
    </div>
    <div class="form-group">
        <label for="CategoriaId">Categoria</label>
        <InputSelect class="form-control" id="CategoriaId" @bind-Value="producto.CategoriaId">
            <option value="">Seleccione...</option>
            @foreach (var categoria in categorias)
            {
                <option value="@categoria.Id">@categoria.Nombre</option>
            }
        </InputSelect>
    </div>
    <br>
    <button class="btn btn-success" type="submit">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle" viewBox="0 0 16 16">
            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
            <path d="m10.97 4.97-.02.022-3.473 4.425-2.093-2.094a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05" />
        </svg>
        Aceptar
    </button>
    <button class="btn btn-danger" @onclick="Cancelar">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle" viewBox="0 0 16 16">
            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708" />
        </svg>
        Cancelar
    </button>

</EditForm>


@code {
    [Parameter] public int ProductoID { get; set; }
    private List<Marca> marcas = new List<Marca>();
    private List<Unidad> unidades = new List<Unidad>();
    private List<Categoria> categorias = new List<Categoria>();
    private Producto producto = new Producto();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Mostrar();

        var respuestaMarcas = await http.Get<List<Marca>>("api/Marca");
        if (!respuestaMarcas.Error)
        {
            marcas = respuestaMarcas.Respuesta;
        }

        var respuestaUnidades = await http.Get<List<Unidad>>("api/Unidad");
        if (!respuestaUnidades.Error)
        {
            unidades = respuestaUnidades.Respuesta;
        }

        var respuestaCategorias = await http.Get<List<Categoria>>("api/Categoria");
        if (!respuestaCategorias.Error)
        {
            categorias = respuestaCategorias.Respuesta;
        }
    }

    private async Task Mostrar()
    {
        var respuesta = await http.Get<Producto>($"api/Producto/{ProductoID}");


        if (!respuesta.Error)
        {
            producto = respuesta.Respuesta;
        }
    }


    private async Task Grabar()
    {
        var httpRespuesta = await http.Put<Producto>($"api/Producto/{ProductoID}", producto);

        if (httpRespuesta.Error)
        {
            var body = httpRespuesta.HttpResponseMessage;
        }

        navigationManager.NavigateTo("/api/Producto");


    }

    private void Cancelar()
    {
        navigationManager.NavigateTo("/api/Producto");
    }
}
