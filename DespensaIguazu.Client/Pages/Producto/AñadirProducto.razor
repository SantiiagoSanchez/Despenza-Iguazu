@page "/api/Producto/Crear"
@inject IHttpServicio http
@inject NavigationManager navigationManager

<div class="container my-5 p-4 rounded text-white"
     style="background: linear-gradient(135deg, #6a0dad, #000000); box-shadow: 0 8px 20px rgba(0,0,0,0.2); max-width: 700px;">

    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold mb-0">Nuevo Producto</h2>
    </div>

    <EditForm Model="ProductoDTO" OnValidSubmit="Grabar">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label class="form-label">Código</label>
            <InputText class="form-control bg-dark text-white border-secondary" @bind-Value="@ProductoDTO.Codigo" />
            <ValidationMessage For="@(() => ProductoDTO.Codigo)" class="text-danger" />
        </div>

        <div class="mb-3">
            <label class="form-label">Nombre</label>
            <InputText class="form-control bg-dark text-white border-secondary" @bind-Value="@ProductoDTO.Nombre" />
            <ValidationMessage For="@(() => ProductoDTO.Nombre)" class="text-danger" />
        </div>

        <div class="mb-3">
            <label class="form-label">Marca</label>
            <div class="d-flex">
                <InputSelect class="form-select bg-dark text-white border-secondary me-2" @bind-Value="ProductoDTO.MarcaId">
                    <option value="">Seleccione...</option>
                    @foreach (var marca in marcas)
                    {
                        <option value="@marca.Id">@marca.Nombre</option>
                    }
                </InputSelect>
                <a href="/api/Marca/Crear" class="btn btn-outline-light rounded-circle d-flex align-items-center justify-content-center"
                   title="Nueva marca" style="width: 40px; height: 40px;">+</a>
            </div>
        </div>

        <div class="mb-3">
            <label class="form-label">Unidad</label>
            <div class="d-flex">
                <InputSelect class="form-select bg-dark text-white border-secondary me-2" @bind-Value="ProductoDTO.UnidadId">
                    <option value="">Seleccione...</option>
                    @foreach (var unidad in unidades)
                    {
                        <option value="@unidad.Id">@unidad.Nombre</option>
                    }
                </InputSelect>
                <a href="/api/Unidad/Crear" class="btn btn-outline-light rounded-circle d-flex align-items-center justify-content-center"
                   title="Nueva unidad" style="width: 40px; height: 40px;">+</a>
            </div>
        </div>

        <div class="mb-3">
            <label class="form-label">Precio</label>
            <InputNumber class="form-control bg-dark text-white border-secondary" @bind-Value="@ProductoDTO.Precio" />
            <ValidationMessage For="@(() => ProductoDTO.Precio)" class="text-danger" />
        </div>

        <div class="mb-3">
            <label class="form-label">Stock</label>
            <InputNumber class="form-control bg-dark text-white border-secondary" @bind-Value="@ProductoDTO.Stock" />
            <ValidationMessage For="@(() => ProductoDTO.Stock)" class="text-danger" />
        </div>

        <div class="mb-4">
            <label class="form-label">Categoría</label>
            <div class="d-flex">
                <InputSelect class="form-select bg-dark text-white border-secondary me-2" @bind-Value="ProductoDTO.CategoriaId">
                    <option value="">Seleccione...</option>
                    @foreach (var categoria in categorias)
                    {
                        <option value="@categoria.Id">@categoria.Nombre</option>
                    }
                </InputSelect>
                <a href="/api/Categoria/Crear" class="btn btn-outline-light rounded-circle d-flex align-items-center justify-content-center"
                   title="Nueva categoría" style="width: 40px; height: 40px;">+</a>
            </div>
        </div>

        <div class="d-flex justify-content-end gap-2">
            <button class="btn btn-success" type="submit" title="Guardar">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor"
                     class="bi bi-check-circle" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                    <path d="m10.97 4.97-.02.022-3.473 4.425-2.093-2.094a.75.75
                             0 0 0-1.06 1.06L6.97 11.03a.75.75
                             0 0 0 1.079-.02l3.992-4.99a.75.75
                             0 0 0-1.071-1.05" />
                </svg> Guardar
            </button>

            <button class="btn btn-danger" @onclick="Cancelar" title="Cancelar">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor"
                     class="bi bi-x-circle" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8
                             0a8 8 0 0 0 0 16" />
                    <path d="M4.646 4.646a.5.5 0 0 1
                             .708 0L8 7.293l2.646-2.647a.5.5
                             0 0 1 .708.708L8.707 8l2.647
                             2.646a.5.5 0 0 1-.708.708L8
                             8.707l-2.646 2.647a.5.5 0 0
                             1-.708-.708L7.293 8 4.646
                             5.354a.5.5 0 0 1 0-.708" />
                </svg> Cancelar
            </button>
        </div>
    </EditForm>
</div>

@code {
    private Producto ProductoDTO = new Producto();
    private List<Marca> marcas = new List<Marca>();
    private List<Unidad> unidades = new List<Unidad>();
    private List<Categoria> categorias = new List<Categoria>();

    protected override async Task OnInitializedAsync()
    {
        var HttpRespuestaMarca = await http.Get<List<Marca>>("api/Marca");
        if (!HttpRespuestaMarca.Error)
        {
            marcas = HttpRespuestaMarca.Respuesta;
        }

        var HttpRespuestaUnidad = await http.Get<List<Unidad>>("api/Unidad");
        if (!HttpRespuestaUnidad.Error)
        {
            unidades = HttpRespuestaUnidad.Respuesta;
        }

        var HttpRespuestaCategoria = await http.Get<List<Categoria>>("api/Categoria");
        if (!HttpRespuestaCategoria.Error)
        {
            categorias = HttpRespuestaCategoria.Respuesta;
        }
    }

    private async Task Grabar()
    {
        var HttpRespuesta = await http.Post<Producto, int>("api/Producto", ProductoDTO);
        if (!HttpRespuesta.Error)
        {
            navigationManager.NavigateTo("/api/Producto");
        }
    }

    private void Cancelar()
    {
        navigationManager.NavigateTo("/api/Producto");
    }
}